\ProvidesPackage{excel_utils}[2024/09/13 Excel Utils for LuaTeX with luacom]

\RequirePackage{luacode}

\begin{luacode*}
    local sty_path = kpse.find_file("excel_utils.sty")
    local dir = sty_path:match("(.*)[/\\]")
    package.path = package.path .. ";" .. dir
    excel_utils = require('excel_utils')
    excel_utils.loadLuacom(dir)
\end{luacode*}

\DeclareOption{noOutput}{%
  \directlua{excel_utils.setNoOutput()}
}

\DeclareOption*{%
  \PackageError{excel_utils}{Unknown option `\CurrentOption'}{}
}

\ProcessOptions\relax

% Add a new Excel file path to the path list
\newcommand{\addPath}[1]{%
    \directlua{excel_utils.addPath("#1")}%
}

% Retrieve the path at a specific index
\newcommand{\getPathAt}[1]{%
    \directlua{tex.sprint(excel_utils.getPathAt(#1))}%
}

% Print all paths in the path list
\newcommand{\getAllPaths}{%
    \directlua{excel_utils.getAllPaths()}%
}

% Get the value of a specific cell
\newcommand{\getCellValue}[2][]{%
    \directlua{excel_utils.getCellValue("#2", "#1")}%
}

\newcommand{\addTable}[3][]{%
    \directlua{excel_utils.getCellValues("#2", "#3", "#1", 1)}
}

% adds plot, if only one column given, the values are going to be numerated
\newcommand{\addPlot}[3][]{%
    \directlua{excel_utils.getCellValues("#2", "#3", "#1", 2)}
}

% creates table with values of two areas
\newcommand{\addTableTwice}[5][]{%
    \directlua{excel_utils.getCellValuesTwice("#2", "#3", "#4", "#5", "#1", 1)}%
}

% plots values of two areas, if all fields contain values
\newcommand{\addPlotTwice}[5][]{%
    \directlua{excel_utils.getCellValuesTwice("#2", "#3", "#4", "#5", "#1", 2)}%
}

% makes debugging a lot easier as not closed excel files could cause errors 
% if the output should remain invisible just do nothing
\newcommand{\openExcelVisible}{
    \directlua{excel_utils.setExcelVisible()}
}

% all instances are going to be closed
\newcommand{\forceClose}{
    \directlua{excel_utils.setForceClose()}
}

% newly opened instances will remain opened -- not working
% problems: GetObject always gets the first excel object and there is no way of iterating 
% over each of the objects. Therefore when not closing a CreateObject I can not access, either 
% the newly created objects or the already opened excel files when running the code again. In 
% addition manually opened files are stored in a different list and can not access the two lists
% separately. 
% One idea of solving this would be to create one global excel variable and add all existing 
% excel instances to it closing all existing.
\newcommand{\remainOpen}{
    %\directlua{excel_utils.setRemainOpen()}
}

\endinput